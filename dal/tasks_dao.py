"""
This code was generated by a tool. Don't modify it manually.
http://sqldalmaker.sourceforge.net
"""

from dal.task import Task


class TasksDao:

    def __init__(self, ds):
        self.ds = ds

    def create_task(self, p):
        """
        (C)RUD: tasks
        Generated values are passed to DTO.
        @type p: Task
        @rtype: None
        @raise: Exception if no rows inserted.
        """
        sql = """insert into tasks (g_id, t_priority, t_date, t_subject, t_comments) values (?, ?, ?, ?, ?)"""
        _ai_values = [["t_id", None]]
        self.ds.insert_row(sql, [p.g_id, p.t_priority, p.t_date, p.t_subject, p.t_comments], _ai_values)
        p.t_id = _ai_values[0][1]

    def read_task(self, t_id, obj):
        """
        C(R)UD: tasks
        @type t_id: java.lang.Integer
        @type obj: Task
        @rtype: None
        @raise: Exception if amount of returned rows != 1.
        """
        sql = """select * from tasks where t_id=?"""
        row = self.ds.query_single_row(sql, [t_id])
        obj.t_id = row["t_id"]  # t(t_id) <- t(t_id)
        obj.g_id = row["g_id"]  # t(g_id) <- t(g_id)
        obj.t_priority = row["t_priority"]  # t(t_priority) <- t(t_priority)
        obj.t_date = row["t_date"]  # t(t_date) <- t(t_date)
        obj.t_subject = row["t_subject"]  # t(t_subject) <- t(t_subject)
        obj.t_comments = row["t_comments"]  # t(t_comments) <- t(t_comments)

    def update_task(self, p):
        """
        CR(U)D: tasks
        @type p: Task
        @rtype: int (the number of affected rows)
        """
        sql = """update tasks set g_id=?, t_priority=?, t_date=?, t_subject=?, t_comments=? where t_id=?"""
        return self.ds.exec_dml(sql, [p.g_id, p.t_priority, p.t_date, p.t_subject, p.t_comments, p.t_id])

    def delete_task(self, t_id):
        """
        CRU(D): tasks
        @type t_id: java.lang.Integer
        @rtype: int (the number of affected rows)
        """
        sql = """delete from tasks where t_id=?"""
        return self.ds.exec_dml(sql, [t_id])

    def get_group_tasks(self, g_id):
        """
        @type g_id: str
        @rtype: list[Task]
        """
        sql = """select * from tasks where g_id =? 
                order by t_id"""
        _res = []

        def _map_cb(row):
            _obj = Task()
            _obj.t_id = row["t_id"]  # t(t_id) <- q(t_id)
            _obj.g_id = row["g_id"]  # t(g_id) <- q(g_id)
            _obj.t_priority = row["t_priority"]  # t(t_priority) <- q(t_priority)
            _obj.t_date = row["t_date"]  # t(t_date) <- q(t_date)
            _obj.t_subject = row["t_subject"]  # t(t_subject) <- q(t_subject)
            _obj.t_comments = row["t_comments"]  # t(t_comments) <- q(t_comments)
            _res.append(_obj)

        self.ds.query_all_rows(sql, [g_id], _map_cb)
        return _res

    def delete_group_tasks(self, g_id):
        """
        @type g_id: str
        @rtype: int (the number of affected rows)
        """
        sql = """delete from tasks where g_id=?"""
        return self.ds.exec_dml(sql, [g_id])

    def get_count(self):
        """
        @rtype: java.lang.Object
        @raise: Exception if amount of returned rows != 1.
        """
        sql = """select count(*) from tasks"""
        return self.ds.query_scalar(sql, [])
